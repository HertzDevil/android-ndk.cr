require "./lib/input"

# Input events.
#
# Input events are opaque structures. Use the provided accessors functions to
# read their properties.
module AndroidNDK::InputEvent
  # Input event types.
  enum Type
    # Indicates that the input event is a key event.
    Key = Lib::AINPUT_EVENT_TYPE_KEY

    # Indicates that the input event is a motion event.
    Motion = Lib::AINPUT_EVENT_TYPE_MOTION

    # Focus event
    Focus = Lib::AINPUT_EVENT_TYPE_FOCUS

    # Capture event
    Capture = Lib::AINPUT_EVENT_TYPE_CAPTURE

    # Drag event
    Drag = Lib::AINPUT_EVENT_TYPE_DRAG

    # TouchMode event
    TouchMode = Lib::AINPUT_EVENT_TYPE_TOUCH_MODE
  end

  def self.new(data : Lib::AInputEvent*) : self
    case event_type = Type.from_value(Lib.AInputEvent_getType(data))
    in .key?
      KeyEvent.new(data)
    in .motion?
      MotionEvent.new(data)
    in .focus?
      FocusEvent.new(data)
    in .capture?
      CaptureEvent.new(data)
    in .drag?
      DragEvent.new(data)
    in .touch_mode?
      TouchModeEvent.new(data)
    end
  end

  def to_unsafe
    @data
  end

  def_equals_and_hash @data

  # Gets the input event type.
  def type : Type
    Type.from_value(Lib.AInputEvent_getType(self))
  end

  # Gets the id for the device that an input event came from.
  #
  # Input events can be generated by multiple different input devices. Use the
  # input device id to obtain information about the input device that was
  # responsible for generating a particular event.
  #
  # An input device id of 0 indicates that the event didn't come from a physical
  # device; other numbers are arbitrary and you shouldn't depend on the values.
  # Use the provided input device query API to obtain information about input
  # devices.
  def device_id : Int32
    Lib.AInputEvent_getDeviceId(self)
  end

  # Gets the input event source.
  def source : Int32
    Lib.AInputEvent_getSource(self)
  end
end

class AndroidNDK::KeyEvent
  include InputEvent

  protected def initialize(@data : Lib::AInputEvent*)
  end
end

class AndroidNDK::MotionEvent
  include InputEvent

  # Motion event actions.
  enum Action
    # A pressed gesture has started, the motion contains the initial starting
    # location.
    Down = Lib::AMOTION_EVENT_ACTION_DOWN

    # A pressed gesture has finished, the motion contains the final release
    # location as well as any intermediate points since the last down or move
    # event.
    Up = Lib::AMOTION_EVENT_ACTION_UP

    # A change has happened during a press gesture (between `Down` and `Up`).
    # The motion contains the most recent point, as well as any intermediate
    # points since the last down or move event.
    Move = Lib::AMOTION_EVENT_ACTION_MOVE

    # The current gesture has been aborted. You will not receive any more points
    # in it. You should treat this as an up event, but not perform any action
    # that you normally would.
    Cancel = Lib::AMOTION_EVENT_ACTION_CANCEL

    # A movement has happened outside of the normal bounds of the UI element.
    # This does not provide a full gesture, but only the initial location of the
    # movement/touch.
    Outside = Lib::AMOTION_EVENT_ACTION_OUTSIDE

    # A non-primary pointer has gone down. The second return value of
    # `MotionEvent#action` indicates which pointer changed.
    PointerDown = Lib::AMOTION_EVENT_ACTION_POINTER_DOWN

    # A non-primary pointer has gone up. The second return value of
    # `MotionEvent#action` indicates which pointer changed.
    PointerUp = Lib::AMOTION_EVENT_ACTION_POINTER_UP

    # A change happened but the pointer is not down (unlike `Move`). The motion
    # contains the most recent point, as well as any intermediate points since
    # the last hover move event.
    HoverMove = Lib::AMOTION_EVENT_ACTION_HOVER_MOVE

    # The motion event contains relative vertical and/or horizontal scroll
    # offsets. Use `MotionEvent#axis_value` to retrieve the information from
    # AMOTION_EVENT_AXIS_VSCROLL and AMOTION_EVENT_AXIS_HSCROLL. The pointer may
    # or may not be down when this event is dispatched. This action is always
    # delivered to the winder under the pointer, which may not be the window
    # currently touched.
    Scroll = Lib::AMOTION_EVENT_ACTION_SCROLL

    # The pointer is not down but has entered the boundaries of a window or
    # view.
    HoverEnter = Lib::AMOTION_EVENT_ACTION_HOVER_ENTER

    # The pointer is not down but has exited the boundaries of a window or view.
    HoverExit = Lib::AMOTION_EVENT_ACTION_HOVER_EXIT

    # One or more buttons have been pressed.
    ButtonPress = Lib::AMOTION_EVENT_ACTION_BUTTON_PRESS

    # One or more buttons have been released.
    ButtonRelease = Lib::AMOTION_EVENT_ACTION_BUTTON_RELEASE
  end

  # Motion event flags.
  @[::Flags]
  enum Flags
    # This flag indicates that the window that received this motion event is
    # partly or wholly obscured by another visible window above it. This flag is
    # set to true even if the event did not directly pass through the obscured
    # area. A security sensitive application can check this flag to identify
    # situations in which a malicious application may have covered up part of
    # its content for the purpose of misleading the user or hijacking touches.
    # An appropriate response might be to drop the suspect touches or to take
    # additional precautions to confirm the user's actual intent.
    WindowIsObscured = Lib::AMOTION_EVENT_FLAG_WINDOW_IS_OBSCURED
  end

  # Motion event edge touch flags.
  @[::Flags]
  enum EdgeFlags
    # Flag indicating the motion event intersected the top edge of the screen.
    Top = Lib::AMOTION_EVENT_EDGE_FLAG_TOP

    # Flag indicating the motion event intersected the bottom edge of the
    # screen.
    Bottom = Lib::AMOTION_EVENT_EDGE_FLAG_BOTTOM

    # Flag indicating the motion event intersected the left edge of the screen.
    Left = Lib::AMOTION_EVENT_EDGE_FLAG_LEFT

    # Flag indicating the motion event intersected the right edge of the screen.
    Right = Lib::AMOTION_EVENT_EDGE_FLAG_RIGHT
  end

  protected def initialize(@data : Lib::AInputEvent*)
  end

  # Gets the combined motion event action code and pointer index. The pointer
  # index is only meaningful for `Action::PointerDown` and `Action::PointerUp`.
  def action : {Action, Int32}
    result = Lib.AMotionEvent_getAction(self)
    action = Action.new(result & Lib::AMOTION_EVENT_ACTION_MASK)
    pointer_index = (result & Lib::AMOTION_EVENT_ACTION_POINTER_INDEX_MASK) >> Lib::AMOTION_EVENT_ACTION_POINTER_INDEX_SHIFT
    {action, pointer_index}
  end

  # Gets the motion event flags.
  def flags : Flags
    Flags.from_value(Lib.AMotionEvent_getFlags(self))
  end

  def meta_state
    raise "TODO"
  end

  def button_state
    raise "TODO"
  end

  # Gets an `EdgeFlags` indicating which edges, if any, were touched by this
  # motion event. For touch events, clients can use this to determine if the
  # user's finger was touching the edge of the display.
  def edge_flags : EdgeFlags
    EdgeFlags.from_value(Lib.AMotionEvent_getEdgeFlags(self))
  end

  # Gets the time when the user originally pressed down to start a stream of
  # position events.
  def down_time : Time::Span
    Time::Span.new(nanoseconds: Lib.AMotionEvent_getDownTime(self))
  end

  # Gets the time when this specific event was generated, in the
  # `Time.monotonic` time base.
  def event_time : Time::Span
    Time::Span.new(nanoseconds: Lib.AMotionEvent_getEventTime(self))
  end

  # Gets the X coordinate offset. For touch events on the screen, this is the
  # delta that was added to the raw screen coordinates to adjust for the
  # absolute position of the containing windows and views.
  def x_offset : Float32
    Lib.AMotionEvent_getXOffset(self)
  end

  # Gets the Y coordinate offset. For touch events on the screen, this is the
  # delta that was added to the raw screen coordinates to adjust for the
  # absolute position of the containing windows and views.
  def y_offset : Float32
    Lib.AMotionEvent_getYOffset(self)
  end

  # Gets the precision of the X coordinates being reported. You can multiply
  # this number with an X coordinate sample to find the actual hardware value of
  # the X coordinate.
  def x_precision : Float32
    Lib.AMotionEvent_getXPrecision(self)
  end

  # Gets the precision of the Y coordinates being reported. You can multiply
  # this number with a Y coordinate sample to find the actual hardware value of
  # the Y coordinate.
  def y_precision : Float32
    Lib.AMotionEvent_getYPrecision(self)
  end

  # Gets the number of pointers of data contained in this event. Always >= 1.
  def pointer_count : Int32
    Lib.AMotionEvent_getPointerCount(self).to_i32
  end

  # Gets the pointer identifier associated with a particular pointer data index
  # in this event. The identifier tells you the actual pointer number associated
  # with the data, accounting for individual pointers going up and down since
  # the start of the current gesture.
  def pointer_id(pointer_index : Int32) : Int32
    Lib.AMotionEvent_getPointerId(self, pointer_index)
  end

  def tool_type
    raise "TODO"
  end

  # Gets the original raw X coordinate of this event. For touch events on the
  # screen, this is the original location of the event on the screen, before it
  # had been adjusted for the containing window and views.
  def raw_x(pointer_index : Int32) : Float
    Lib.AMotionEvent_getRawX(self, pointer_index)
  end

  # Gets the original raw Y coordinate of this event. For touch events on the
  # screen, this is the original location of the event on the screen, before it
  # had been adjusted for the containing window and views.
  def raw_y(pointer_index : Int32) : Float
    Lib.AMotionEvent_getRawY(self, pointer_index)
  end

  # Gets the current X coordinate of this event for the given pointer index.
  # Whole numbers are pixels; the value may have a fraction for input devices
  # that are sub-pixel precise.
  def x(pointer_index : Int32) : Float
    Lib.AMotionEvent_getX(self, pointer_index)
  end

  # Gets the current Y coordinate of this event for the given pointer index.
  # Whole numbers are pixels; the value may have a fraction for input devices
  # that are sub-pixel precise.
  def y(pointer_index : Int32) : Float
    Lib.AMotionEvent_getY(self, pointer_index)
  end
end

class AndroidNDK::FocusEvent
  include InputEvent

  protected def initialize(@data : Lib::AInputEvent*)
  end
end

class AndroidNDK::CaptureEvent
  include InputEvent

  protected def initialize(@data : Lib::AInputEvent*)
  end
end

class AndroidNDK::DragEvent
  include InputEvent

  protected def initialize(@data : Lib::AInputEvent*)
  end
end

class AndroidNDK::TouchModeEvent
  include InputEvent

  protected def initialize(@data : Lib::AInputEvent*)
  end
end
